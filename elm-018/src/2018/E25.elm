module E25 exposing (..)

import Array exposing (Array, isEmpty)
import Bitwise
import Char
import Dict exposing (Dict)
import Helpers as H
import Html exposing (..)
import Html.Events exposing (onClick)
import List
import List.Extra
import Parser exposing ((|.), (|=), Parser, andThen, keep, keyword, succeed, symbol)
import Regex
import Set exposing (Set)
import String


type alias Point =
    { x : Int, y : Int, z : Int, a : Int }


parsePoint : Parser Point
parsePoint =
    Parser.succeed Point
        |= H.pInt
        |. symbol ","
        |= H.pInt
        |. symbol ","
        |= H.pInt
        |. symbol ","
        |= H.pInt


type Dimension
    = X
    | Y
    | Z
    | A


type KDTree b a
    = Node Dimension b (KDTree b a) (KDTree b a) a
    | Leaf


getA : KDTree b a -> Maybe a
getA aKDTree =
    case aKDTree of
        Node dimension b kDTree kDTree2 a ->
            Just a

        Leaf ->
            Nothing


next : Dimension -> Dimension
next dimension =
    case dimension of
        X ->
            Y

        Y ->
            Z

        Z ->
            A

        A ->
            X


getDimension : Dimension -> Point -> Int
getDimension dimension point =
    case dimension of
        X ->
            point.x

        Y ->
            point.y

        Z ->
            point.z

        A ->
            point.a


insert : Point -> Dimension -> KDTree Point () -> KDTree Point ()
insert point dimension kDTree =
    case kDTree of
        Leaf ->
            Node dimension point Leaf Leaf ()

        Node dim2 point2 left right () ->
            if point == point2 then
                Node dim2 point2 left right ()
            else if getDimension dim2 point < getDimension dim2 point2 then
                Node dim2 point2 (insert point (next dim2) left) right ()
            else
                Node dim2 point2 left (insert point (next dim2) right) ()


distance : Point -> Point -> Int
distance p1 p2 =
    [ abs (p1.x - p2.x)
    , abs (p1.y - p2.y)
    , abs (p1.z - p2.z)
    , abs (p1.a - p2.a)
    ]
        |> List.sum


findClosest : Point -> ( Point, Int ) -> KDTree Point () -> ( Point, Int )
findClosest point ( pointAcc, distAcc ) tree =
    case tree of
        Leaf ->
            ( pointAcc, distAcc )

        Node dimension point2 left right () ->
            let
                newAcc =
                    if distance point point2 < distAcc then
                        ( point2, distance point point2 )
                    else
                        ( pointAcc, distAcc )
            in
            if getDimension dimension point < getDimension dimension point2 then
                findClosest point newAcc left
            else
                findClosest point newAcc right


type alias State =
    { trees : Dict Int (KDTree Point ()) }


sameConstellation : Point -> Point -> Bool
sameConstellation point point2 =
    distance point point2 <= 3


treeToList : List ( b, a ) -> List (KDTree b a) -> List ( b, a )
treeToList acc abKDTrees =
    case abKDTrees of
        [] ->
            acc

        tree :: rest ->
            case tree of
                Leaf ->
                    treeToList acc rest

                Node d b l r a ->
                    treeToList (( b, a ) :: acc) (l :: r :: rest)


mergeTrees : KDTree Point () -> KDTree Point () -> KDTree Point ()
mergeTrees tree1 tree2 =
    let
        treeList =
            treeToList [] [ tree2 ]
    in
    treeList |> List.foldl (\( point, _ ) tree1_ -> tree1_ |> insert point X) tree1


initialToClosest : ( Point, Int )
initialToClosest =
    ( { x = 0, y = 0, z = 0, a = 0 }, 1000000000 )


step : Point -> State -> State
step point state =
    let
        goodTrees =
            state.trees
                |> Dict.filter
                    (\_ t ->
                        Tuple.second (findClosest2 point initialToClosest t) <= 3
                    )
                |> Dict.toList
    in
    case goodTrees of
        [] ->
            Debug.crash ""

        [ ( i, x ) ] ->
            { state | trees = state.trees |> Dict.update i (H.uM >> insert point X >> Just) }

        first :: rest ->
            -- more than 1
            let
                newTree =
                    rest |> List.foldl (\( _, t ) first_ -> mergeTrees first_ t) (first |> Tuple.second |> insert point X)

                dictWithDeletedIndexes =
                    rest |> List.foldl (\( i, _ ) dict -> Dict.remove i dict) state.trees
            in
            { state | trees = dictWithDeletedIndexes |> Dict.insert (Tuple.first first) newTree }


initialState : List Point -> State
initialState points =
    points |> List.indexedMap (\i p -> ( i, insert p X Leaf )) |> Dict.fromList |> State


answer1Loop : List Point -> State -> State
answer1Loop listPoint state =
    let
        newState =
            listPoint |> List.foldl step state
    in
    if Dict.size newState.trees == Dict.size state.trees then
        state
    else
        answer1Loop listPoint newState


answer1 : List Point -> State
answer1 inputs =
    let
        state =
            initialState inputs
    in
    answer1Loop inputs state


findClosest2 : Point -> ( Point, Int ) -> KDTree Point () -> ( Point, Int )
findClosest2 point acc tree =
    case tree of
        Leaf ->
            acc

        Node d p l r () ->
            let
                acc1 =
                    findClosest point acc l

                acc2 =
                    findClosest point acc1 r

                newAcc =
                    if distance point p < Tuple.second acc2 then
                        ( p, distance point p )
                    else
                        acc2
            in
            newAcc


testState : List Point -> State -> State
testState input state =
    input
        |> List.map
            (\point ->
                state.trees
                    |> Dict.map
                        (\_ tree ->
                            if findClosest point initialToClosest tree /= findClosest2 point initialToClosest tree then
                                Debug.crash (toString (findClosest point initialToClosest tree) ++ " " ++ toString (findClosest2 point initialToClosest tree))
                            else
                                tree
                        )
                    |> always point
            )
        |> always state


test1 =
    input
        |> String.lines
        |> List.map (Parser.run parsePoint >> H.uR)
        |> answer1
        |> .trees
        |> Dict.size
        |> Debug.log "answer1"



{-
   x -> 2.x, 3.x
   y -> 1.y 4.y

    ....C
    .....
    ..1..
    .2.3.
    ..4..
-}


inputtest1 =
    """-1,2,2,0
0,0,2,-2
0,0,0,-2
-1,2,0,0
-2,-2,-2,2
3,0,2,-1
-1,3,2,2
-1,0,-1,0
0,2,1,-2
3,0,0,0"""


inputtest2 =
    """1,-1,-1,-2
-2,-2,0,1
0,2,1,3
-2,3,-2,1
0,2,3,-2
-1,-1,1,-2
0,-2,-1,0
-2,2,3,-1
1,2,2,0
-1,-2,0,-2"""


inputtest3 =
    """1,-1,0,1
2,0,-1,0
3,2,-1,0
0,0,3,1
0,0,-1,-1
2,3,-2,0
-2,2,0,0
2,-2,0,-1
1,-1,0,-1
3,2,0,2"""


input =
    """-6,-7,-6,0
0,-4,5,-4
-4,8,-1,-6
0,-2,-4,-7
8,8,1,6
5,-7,-1,4
-1,-4,1,-7
0,7,6,0
-1,-8,-4,-6
4,0,0,-1
6,2,-7,-1
-2,3,0,0
7,0,-6,0
0,-8,-4,-4
1,6,8,-7
8,-3,-1,8
5,1,-2,4
-4,-5,-3,5
-3,-3,8,8
7,-2,-3,8
5,-8,8,-1
-6,-7,6,3
-5,4,-7,-5
6,-5,3,-1
3,-8,-8,-8
1,0,8,7
1,1,6,-4
7,-3,-4,-2
4,0,-4,6
-2,7,-2,8
1,6,6,-7
-4,-3,-1,-1
4,0,-3,-6
-7,2,0,2
4,0,-5,-5
8,7,-3,8
-7,4,0,-3
4,0,1,6
-2,-6,0,3
-8,0,7,-2
8,-3,6,4
4,2,-2,-8
7,1,0,7
-2,8,2,-5
2,1,1,4
-6,-5,-4,8
6,-7,0,-8
-3,1,2,0
1,5,-3,-7
8,0,2,-7
1,6,0,-1
-6,4,2,-8
0,-6,-5,-8
4,0,-6,-3
-2,-3,6,-6
6,-1,0,-3
5,4,-6,8
7,-4,-3,0
-5,-5,7,7
0,8,-6,7
-3,4,1,5
2,3,-5,5
-4,6,4,8
-8,-2,0,-7
3,5,-3,1
-5,-6,8,-7
-6,1,5,2
-1,-4,-8,-5
0,-1,-8,-8
4,-3,8,7
-1,3,-1,8
-6,4,-6,8
-7,-3,-5,2
-7,-2,-7,1
1,8,0,-8
6,0,3,-5
1,4,0,6
7,-3,2,6
0,6,3,-1
-3,7,1,3
-6,-7,-6,-1
0,5,5,-1
-8,6,0,-1
7,0,-2,-5
-4,1,-4,0
-2,8,-1,5
-8,2,7,-5
-1,-4,-6,5
-6,8,4,-2
1,6,1,5
3,0,7,-5
3,5,3,0
-8,7,3,-7
-6,6,1,-4
7,6,-5,3
4,-2,3,-5
-3,5,-5,0
5,-1,-7,4
2,7,-6,-2
-7,0,5,-1
-3,8,-1,6
0,-3,-4,5
3,4,8,7
-7,3,3,-1
-8,-5,5,-2
-7,3,-6,3
2,-6,7,3
-7,-2,-3,-7
-8,0,-2,-6
1,-3,6,-3
3,-8,-5,-8
5,0,8,0
-8,0,-3,0
1,-5,3,-1
0,5,1,7
0,8,-1,-8
-8,-7,3,2
-2,-1,-2,-1
0,5,5,2
4,2,-5,-8
0,3,0,-8
5,1,6,-6
-8,8,8,-3
-8,-2,7,-1
5,-3,4,2
-3,7,-8,2
8,-4,4,3
0,-8,8,7
4,0,1,-2
7,8,0,6
-2,3,-4,-3
8,-3,0,-2
0,7,1,2
-6,2,4,3
8,2,-7,-1
0,-7,-5,7
3,-2,-6,8
-4,-1,-8,2
3,-3,-5,-5
-3,8,-8,0
-3,8,-1,-4
0,6,2,-5
-3,5,6,1
0,-1,8,-5
0,0,-5,5
7,1,-2,-7
-8,-2,-6,4
0,-4,1,4
1,-6,6,-3
1,5,-2,7
-4,5,-4,0
7,6,-8,6
-1,-2,-6,6
6,0,7,-8
-4,-2,5,0
-3,8,-7,7
0,0,3,-6
1,-6,-6,-6
2,-2,-6,-2
7,7,0,1
7,-1,0,-3
3,1,4,0
7,7,-4,6
6,6,3,-1
-1,4,4,0
-3,2,7,5
0,1,6,-7
-6,4,-1,-6
1,4,-4,0
-5,-8,4,-2
-6,5,-2,4
-8,-4,7,3
6,-2,0,6
-3,3,6,6
-5,-8,7,-7
-1,-2,-5,-4
-3,-4,-7,6
1,6,7,4
-1,3,-7,3
3,-7,1,1
6,-5,-5,-8
3,0,-1,4
1,-5,-1,-6
-8,-4,-2,8
6,8,5,5
-3,-7,5,-7
5,-4,6,5
-2,4,-5,7
8,3,-6,-2
8,1,0,5
4,4,0,6
1,4,6,3
-8,2,-5,6
3,-6,-5,0
-7,0,1,-2
5,7,-1,7
2,-8,2,-3
2,-3,8,0
8,1,7,-5
4,-3,1,0
2,8,6,0
-5,7,-4,-1
-8,-6,-3,5
-8,2,-7,6
3,1,-3,-7
-5,2,-7,5
-4,-7,7,0
8,-4,5,-6
4,-3,-2,6
-1,-7,3,-5
-3,-5,-3,-2
-8,2,5,-3
-6,5,8,-4
-4,5,-5,7
2,7,3,-1
0,3,3,0
-6,-4,4,0
2,3,-1,7
6,6,-3,6
-7,5,0,-4
-1,0,1,3
5,-1,5,-1
0,-6,-2,-8
-3,0,0,6
3,-8,4,-3
-1,-5,-5,0
-8,-2,4,-4
-5,0,3,4
-8,-3,0,-6
7,-7,-2,-6
8,7,-7,1
5,7,-7,8
7,-1,2,-5
-2,5,-7,2
-1,-6,0,-3
-6,1,-6,5
-2,-5,-6,1
8,8,7,4
-5,0,3,6
0,8,-4,0
-7,-2,-2,5
-8,-1,-6,-7
6,-6,-7,-6
-2,-7,7,0
1,4,1,2
-2,8,-3,3
6,3,6,-4
0,-1,7,-4
0,5,0,0
-4,0,4,-8
-3,0,-7,6
4,-2,-5,-5
2,0,-7,-3
0,3,6,-3
-3,5,0,1
-6,5,-1,2
-4,-2,2,-6
-2,2,-8,5
0,3,3,6
-5,-5,5,0
8,1,-6,2
-1,-2,-4,3
-7,7,0,4
-4,6,-8,8
-1,0,5,-3
7,-1,7,-1
3,-6,-5,-2
-8,-5,6,6
5,2,-2,-2
1,-3,0,0
-3,0,1,6
-5,6,4,4
-2,8,-1,-7
-4,3,-8,-2
-1,0,6,8
7,-6,-5,-7
-8,-5,0,6
0,-2,7,4
8,7,-7,-8
4,2,5,-6
-5,-2,-7,-8
2,7,8,2
0,-4,5,2
-2,8,3,1
0,-8,3,-8
0,-7,6,0
-2,1,-7,0
8,3,5,-1
8,2,6,-6
-5,-2,8,-7
-5,-8,0,0
-8,-5,-4,-8
5,-3,6,-3
-7,-1,-6,-6
-1,-2,8,-3
-2,-7,2,-4
7,2,0,6
-1,-6,8,-6
-8,-6,0,0
4,-7,0,5
6,0,5,6
-5,7,-3,5
-7,5,-4,-8
-8,-2,6,-3
-1,6,-8,4
0,-8,-5,5
-2,-7,-1,-1
2,4,-4,1
8,7,-4,0
-4,0,-4,8
4,-7,-7,-8
0,-5,4,3
6,3,0,6
-7,0,-3,5
-5,6,-7,-3
6,0,-3,1
8,3,-5,-6
8,-1,6,-2
4,-6,6,-3
4,-7,-6,-2
3,7,-6,-3
-8,0,3,7
-7,5,7,7
7,5,-3,-8
0,4,0,-2
-1,-6,4,4
0,4,7,-5
-5,2,2,1
-6,-8,-1,-6
8,4,2,4
-4,-4,1,0
3,5,0,-1
-5,-3,5,0
-5,-8,7,-6
0,-7,4,-7
3,2,-8,-4
8,-7,8,-1
-2,6,-1,5
8,-1,0,5
-6,5,-7,-2
5,3,7,3
0,-8,6,-1
2,-6,0,-5
1,-3,-7,-7
7,-6,-6,-4
0,1,7,7
1,-3,-3,-4
0,-1,-1,1
-8,8,8,7
2,5,-4,-1
0,5,2,4
-1,-2,-5,2
-5,7,8,-8
0,-8,2,4
-4,-5,-8,3
-3,-7,0,0
-3,-8,3,-5
4,1,1,3
5,8,5,-8
1,2,8,0
-3,2,2,5
-4,-1,-1,-4
0,8,-4,-4
-4,0,-8,8
-8,4,3,-8
-7,-5,-2,6
-7,-4,6,-6
-5,3,7,-1
-5,-7,-1,5
6,7,6,-6
-3,3,-3,6
-3,3,-6,-5
7,-4,6,-7
6,-1,8,7
-4,5,-7,2
-5,2,-4,-6
7,0,-6,-4
-1,8,2,2
5,-4,-6,-7
8,2,-8,0
-3,5,0,-8
4,-3,-1,0
1,-3,-5,-5
8,5,0,3
8,-3,-7,-1
-2,-7,-3,-8
-6,0,-5,-6
-2,-5,3,-5
-8,4,-7,-3
-4,-7,-8,4
-8,0,-4,0
7,5,6,5
-2,4,-5,6
-4,-6,3,1
-5,4,-2,-7
0,-3,8,3
-8,0,6,-6
1,-1,3,6
-6,7,5,4
-5,4,-5,6
0,-6,3,5
-5,7,0,-8
1,5,1,0
4,-3,6,3
-5,-1,2,-2
4,7,-2,5
0,-3,8,7
-8,0,0,6
4,0,-6,1
7,0,4,-2
8,-2,-7,-7
0,-7,-3,-3
-1,-5,0,-5
-1,-4,-8,5
7,-2,5,-7
-1,6,-8,5
3,-4,5,-8
5,-6,-1,0
-5,1,-1,-8
-3,-5,-8,2
2,-3,0,5
-3,4,-1,-3
1,4,0,-4
-2,7,1,0
0,-5,-7,-3
1,5,-2,-2
-2,-4,1,-5
1,4,-2,-4
-4,-2,-1,-5
-3,3,7,-5
4,4,6,7
0,0,-8,2
5,4,-5,-6
-3,5,0,7
3,0,2,8
5,0,4,6
-8,-3,-2,-8
-3,8,1,-5
2,7,7,6
7,6,7,8
2,7,-6,6
2,0,-6,8
1,7,0,4
-4,0,0,6
2,1,-3,-3
-1,-3,6,-5
-6,-3,0,-3
-8,6,0,-4
-7,-8,-6,1
0,0,8,0
-2,-8,-6,-1
-5,-6,-8,-8
7,-6,5,-4
8,-1,2,-6
-5,-7,7,-6
5,1,0,3
0,8,0,-3
-1,6,-6,-8
-4,-5,0,-2
0,3,0,-3
-1,0,0,-4
-7,6,-2,3
8,-1,5,7
0,7,-3,1
-2,-5,2,8
5,1,-5,-1
6,-6,-8,6
-5,6,-7,-2
2,1,1,0
-8,3,8,-2
3,6,-5,0
0,5,1,-1
1,-4,6,-7
5,-7,-3,7
-5,3,-7,-3
2,2,7,-2
-6,-7,0,8
-8,-5,7,-1
6,5,-4,5
4,6,-1,-3
-5,-3,-1,8
4,7,0,-7
-7,-7,5,5
-2,0,-1,-3
-2,4,0,1
2,0,0,4
3,0,3,-6
8,-6,6,-7
0,3,0,0
0,-4,-1,6
6,-7,3,-2
-5,-8,-2,-7
-3,3,0,1
-8,-8,2,0
6,6,3,0
-1,-7,-4,0
6,6,-3,0
0,1,0,3
3,0,-1,-1
-6,-8,4,6
-3,1,-4,8
-8,-1,1,-5
-6,2,0,1
-3,-2,-6,7
0,6,5,1
-2,-1,6,5
-1,-8,0,-4
3,0,-1,-4
3,3,-5,0
-5,-5,7,-2
3,0,4,0
-6,6,6,-7
7,-1,-7,5
-2,-5,5,6
-3,-3,2,0
-6,-8,6,-2
7,7,4,-5
0,3,-6,-8
7,2,-1,4
0,3,6,-2
7,6,-7,5
0,4,5,-3
0,-6,-2,0
-7,-7,-7,4
0,-1,1,-3
7,6,-6,4
6,6,1,-6
3,-6,-2,3
-3,6,-6,-8
4,2,-2,-2
0,2,-5,-8
-5,4,3,0
-6,-6,-1,1
0,-2,-8,-6
-5,7,2,7
-3,5,-3,-8
-5,-2,-4,-3
-6,5,-2,-8
0,8,-8,-2
-7,1,-1,-7
-8,-6,-2,-1
3,-7,6,0
6,6,-5,-1
-3,-8,6,-1
-4,8,5,0
-3,8,-6,-6
-1,-7,5,-7
-8,7,1,3
-1,4,-3,-2
0,5,2,6
3,8,2,-3
-2,-6,4,7
-2,-8,4,-2
8,-4,5,1
1,1,5,4
0,0,-3,-4
3,4,1,2
-2,7,-7,-8
5,1,3,-7
-8,6,0,-7
5,-5,2,8
3,-7,3,7
0,0,2,0
-7,-2,3,-2
-7,1,-8,-8
6,5,-7,1
-2,4,-5,-6
0,1,6,0
-1,0,-3,-7
-3,8,-2,1
6,5,3,1
-1,-6,6,0
-3,-6,7,-8
6,6,0,0
7,-8,4,0
1,0,0,-6
2,0,1,4
-4,0,7,-5
3,-4,5,-5
8,8,0,-1
-1,1,-5,0
3,6,5,-4
0,-3,-4,0
6,-1,-7,8
0,-2,0,-2
-8,0,3,0
-4,4,1,4
-5,4,0,3
0,-5,-6,1
0,4,-5,3
-3,2,0,-2
-4,-6,0,7
-7,0,2,-7
2,-3,-6,2
-7,5,-7,-4
0,-3,-1,0
7,3,7,7
4,3,-3,4
3,8,-3,8
-4,5,-8,-4
5,5,6,2
0,-7,-1,1
-6,-8,0,-5
-5,6,0,2
0,-7,-2,-8
-3,3,2,-4
8,6,-5,0
4,-4,-4,-8
-1,2,-6,8
-7,-7,4,0
2,-5,-8,-5
-3,-4,2,0
4,5,0,0
-5,8,-5,-8
6,5,6,4
4,3,0,5
3,-6,-7,-2
1,2,5,5
-1,2,-2,-1
-8,0,-3,-1
-4,5,-3,8
5,6,0,-4
-1,-4,0,-8
-3,7,1,7
1,1,-5,8
-2,-4,4,-1
0,0,-7,-1
4,0,5,-3
-1,8,-1,6
-3,1,-4,-2
-3,-7,-4,-5
2,-2,-4,-1
4,-4,5,-2
7,-7,-4,3
1,0,-2,-6
7,-4,7,-4
6,-6,8,-7
-7,4,-3,-8
-1,-1,6,-2
0,0,-2,-6
-7,0,-5,-4
1,-5,0,8
-8,-2,6,-6
7,3,-3,-2
1,2,0,-2
2,-3,8,-2
-7,-5,0,-5
-4,8,-3,-5
-4,-2,-8,5
4,-8,3,5
3,-5,0,-6
-3,6,5,5
3,-1,0,6
0,-1,6,-7
1,-8,8,-5
3,0,-6,-5
7,3,7,8
2,-3,-1,-2
-6,7,-6,-3
2,8,7,-5
0,4,0,6
-4,-6,-1,-8
-7,2,1,-5
5,1,0,4
-6,6,-1,7
7,-1,0,7
3,2,3,0
8,6,-6,8
5,-3,-7,-5
6,-5,-6,0
5,8,4,-3
-6,-5,0,-6
-5,2,-2,-5
1,3,4,0
0,0,-1,-7
1,7,-5,4
-6,-5,3,2
-1,-2,-7,-1
0,1,-6,-3
-3,-4,0,-7
3,6,-1,1
1,5,-3,7
3,0,-2,-6
8,6,2,2
-1,7,0,5
6,2,2,6
-6,-1,-6,-5
0,0,2,-1
0,2,2,0
-5,0,-1,-7
0,6,4,7
-5,0,7,1
-5,-8,-5,7
0,-3,7,0
-4,3,-3,-6
-4,0,8,1
8,1,7,2
-6,-3,-8,-6
-4,-4,8,8
3,8,7,-4
0,4,5,7
-3,-6,1,6
0,8,-8,5
-8,4,-4,8
-3,3,-8,-5
2,7,0,0
0,7,-6,-3
1,6,4,3
8,7,-5,0
0,8,-8,-1
7,1,7,7
8,3,-6,0
6,0,6,-3
-3,1,6,-8
-6,-2,3,1
7,0,7,2
5,8,0,0
0,1,-6,8
0,-5,5,1
0,-6,8,-6
0,8,4,-7
5,-2,-7,5
-3,5,2,-3
-6,-6,-6,5
-7,-1,-3,1
3,8,-6,-8
-4,7,2,4
-1,-5,-6,4
0,3,-3,0
-3,-3,0,2
-3,0,-8,-5
1,0,3,-3
7,-3,4,-2
6,-6,5,-4
-1,-3,-8,-7
0,1,-1,-6
4,-3,6,8
0,-5,7,1
-8,1,2,8
2,-2,4,-1
-5,4,5,5
-3,-8,4,7
-6,1,-5,-8
5,6,5,2
6,2,-7,3
5,-5,8,7
-7,1,1,2
-3,-1,0,-3
-8,8,-2,7
2,2,4,6
-4,0,6,-6
-3,2,7,4
7,-2,1,-7
-6,-4,-8,-3
-1,7,5,-6
3,1,-2,7
-4,1,-7,-7
3,-8,-2,0
3,1,-7,5
7,-5,6,-5
1,0,5,-4
0,-3,-4,-6
2,7,1,6
-7,7,4,-6
3,0,1,-5
3,-8,1,8
7,5,-2,-7
3,-1,0,0
5,-6,8,6
1,8,-3,7
1,-1,-5,0
1,3,6,-5
-1,6,-5,-3
4,1,-8,2
5,8,3,8
7,8,7,1
-6,0,4,0
0,-1,0,-5
5,6,-6,-3
8,5,2,6
-2,0,4,5
-2,4,0,8
7,-1,0,3
5,7,7,-5
-1,2,-6,-1
-6,5,-6,-5
0,-7,5,-7
-1,2,3,-5
3,4,0,3
2,-2,7,4
8,-3,8,0
3,-2,-2,0
1,0,-2,1
-5,-6,-4,0
7,1,4,1
8,3,-1,-1
-4,3,0,7
-5,0,6,-7
0,-5,-2,6
8,3,-3,-3
2,-8,5,-5
-2,1,-4,3
-2,-3,-6,-2
3,4,4,4
-8,4,2,6
6,0,5,0
0,-1,6,-4
-2,-8,4,-6
-2,6,0,1
-2,-8,-5,1
-8,-6,-6,-2
3,-5,-1,-2
7,-2,2,-8
-6,-2,-1,7
8,2,-1,-8
6,5,-6,-8
5,-3,5,2
-4,-2,-6,1
5,-8,-5,3
7,1,-7,-6
2,0,-8,7
-2,4,2,0
3,-5,7,-5
-7,7,-5,4
-7,-8,0,-4
-4,7,0,4
-3,-3,0,-1
-6,-5,-3,4
4,1,0,2
2,2,-2,-2
1,7,1,0
7,1,-5,0
-1,0,-4,-7
-6,-8,6,-7
0,7,-3,-5
1,0,-7,6
8,8,1,3
4,-8,5,-6
5,3,-2,0
8,-3,-6,-4
-4,2,3,6
4,3,0,7
6,-8,0,3
-6,4,-8,4
6,1,-7,-8
-3,-3,4,3
6,0,-1,7
1,8,-5,8
-5,5,5,-6
2,0,-8,-5
7,3,-6,-5
1,4,-8,-2
-4,4,0,-1
-3,6,1,3
4,-8,-3,-1
5,8,4,4
0,-7,8,2
6,7,0,-2
-4,-4,0,-6
-4,-4,-5,8
-2,-4,-7,-7
2,4,-2,-3
-2,6,-3,-1
-7,-6,6,-2
8,-2,4,5
-6,7,2,2
-5,4,7,3
-7,2,4,-1
-3,6,-7,-5
4,-6,4,6
5,1,6,4
-8,-4,-7,-8
-4,-8,3,8
-4,8,-3,-7
7,4,-7,4
-8,-7,0,-3
0,-5,-7,3
3,3,-1,-6
-6,1,-6,7
-3,-7,0,-8
5,6,6,5
1,-2,-3,-1
1,-4,3,6
1,-7,-2,3
-8,8,7,1
-2,4,-8,5
-3,3,-8,-4
-6,7,7,-1
1,5,0,5
1,-7,0,3
3,-1,-4,6
-7,0,-8,-2
4,7,-5,3
-4,7,-2,-4
3,6,1,-6
3,-8,5,-2
2,-5,-4,-2
0,1,6,2
0,5,-3,4
-5,-6,-2,7
4,-1,-2,-5
-5,-8,4,-6
7,-6,-7,-4
-5,0,-6,3
2,6,6,3
2,6,4,-6
1,7,-4,5
-2,0,6,-2
8,-8,8,8
4,6,2,-2
-7,8,-3,-7
2,2,-8,-7
6,-5,-8,-7
3,5,1,2
1,1,-5,-6
0,-4,4,-8
2,-5,-4,7
-6,-8,-5,-2
8,-3,-7,-4
3,5,8,-2
7,-6,-8,2
-6,-8,-3,0
-3,4,-5,0
4,-1,-6,8
7,-6,7,-6
-5,4,4,3
4,0,-6,8
-2,1,-3,0
0,1,7,-7
0,6,3,0
3,0,-6,-4
2,5,8,-3
5,-4,8,-1
0,-7,-8,-7
8,2,8,-5
2,-3,7,5
8,4,-7,-4
8,-3,1,-8
-8,0,-3,1
5,6,-7,2
-1,-4,0,7
-2,0,4,3
6,4,5,2
2,0,-5,0
5,4,0,2
8,0,-3,-6
3,-1,-2,-8
-2,7,-4,8
1,3,6,6
-3,-4,-8,6
1,6,5,5
-4,5,1,-4
6,-3,3,-4
0,6,6,-4
2,2,5,1
-4,-1,-1,-8
7,2,5,2
-1,-6,-4,4
5,-4,-5,0
-6,4,0,6
7,8,-4,0
-1,-5,4,0
4,3,4,1
3,-6,7,-5
0,3,-2,1
-7,-2,0,-2
-5,-6,0,-2
-2,7,3,3
1,7,-8,-1
-5,-4,0,8
-5,8,-1,5
-7,5,4,7
-5,-4,0,7
1,3,-8,4
8,0,-6,-2
8,5,-5,4
7,-2,-6,2
1,-4,1,-4
0,3,1,0
7,2,-7,-2
-2,3,-2,-7
-5,-7,-3,-8
0,-3,5,-8
8,1,-2,1
-2,5,8,1
2,-5,-3,-1
-1,-5,3,-6
-7,-4,-2,8
4,1,-1,3
6,2,8,3
-1,-5,0,5
5,3,0,5
-4,-6,0,3
-2,0,3,3
8,7,0,-5
1,1,3,8
1,7,-3,6
5,-2,-1,4
-7,4,-1,-7
-5,7,-5,3
-2,-2,-4,0
-3,2,-7,2
7,-2,-4,1
8,-2,-2,4
-1,-6,-6,5
6,-7,-1,-3
-8,-6,8,-5
6,0,-7,1
-1,8,-8,7
-4,2,0,1
0,4,-1,4
6,6,1,-4
-1,-2,7,-5
-3,4,-3,8
4,-8,-3,-2
-1,-8,1,-5
0,-4,-2,-5
-6,-8,-4,-1
4,0,-6,-7
3,-3,-4,-1
-1,3,-1,4
0,4,7,-1
-4,8,7,1
3,1,-4,0
8,-4,-2,0
-5,-2,-5,-8
6,-8,-2,1
5,2,-3,0
0,-8,7,8
1,-5,4,6
6,-6,-8,-8
8,-3,-2,-2
8,-4,8,-8
6,-8,-1,-3
-8,2,-4,-1
7,-1,-3,-5
0,-1,-3,-4
-8,-1,-7,-8
0,-1,2,-6
-2,1,-8,4
-5,1,-8,8
-5,-2,6,0
6,-6,1,8
-4,6,-1,-6
3,-5,5,-4
-8,-7,6,6
0,1,5,0
5,0,1,6
8,-1,-1,-1
-7,-5,5,8
6,1,0,2
7,8,1,4
2,5,-6,-3
3,-1,1,-2
1,4,1,4
2,0,4,6
8,8,2,-7
-5,-7,2,5
-5,-2,1,-7
0,-5,-5,4
-1,-5,1,2
-4,1,-1,0
1,0,-1,2
1,7,0,-6
-5,5,0,7
8,-7,-3,3
1,5,0,0
6,5,7,7
-2,5,8,-5
-7,4,6,-2
-5,4,-2,4
-4,1,-1,-1
-6,-7,-3,-7
-4,-6,-8,-8
-8,7,8,-1
4,0,7,-3
1,7,-1,-2
-8,3,0,-3
6,4,8,8
-7,6,5,-8
8,1,-3,-1
-4,2,0,-4
5,-8,3,3
-5,2,-5,-6
-8,6,2,-6
-1,6,7,8
2,8,-7,-7
0,-3,3,-2
5,-6,6,-3
-7,-4,0,-6
-3,2,0,-1
-7,-1,6,6
-5,-3,2,-4
4,0,-6,7
4,5,-8,0
-2,5,4,4
6,-1,-2,-1
-5,1,-1,3
0,-7,5,-1
0,0,0,3
7,0,3,-5
8,2,-6,4
2,1,3,6
2,-3,-7,4
6,0,3,-6
6,-1,-6,8
8,-1,-7,6
-6,-5,-5,2
0,8,-8,-8
-6,0,5,3
1,-3,2,0
-5,0,-4,-4
-5,-8,0,-6
-6,-7,-7,-2
-2,3,-4,0
-5,0,-8,8
7,6,-4,8
4,-5,4,8
0,8,5,-6
7,7,1,-2
1,-7,0,4
-1,6,4,5
3,-6,-8,-7
5,-7,-1,0
-4,-4,2,6
0,2,6,0
8,-5,3,2
-4,-4,2,0
3,5,-6,-3
-3,-5,-6,-4
-8,5,1,3
-3,-6,0,3
0,5,-4,-8
-6,-3,4,5
0,3,5,-8
-6,5,-5,-3
-6,0,-8,-7
5,2,4,-5
-2,-6,-3,5
3,1,-1,-1
3,-6,0,5
-4,0,4,3
8,0,0,8
-7,-2,2,3
-5,7,-1,-6
4,8,1,0
-3,4,-2,2
1,6,8,6
-7,-2,-3,6
-8,-8,0,-7
-1,-5,-5,6
7,5,3,-5
7,2,7,-8
0,6,8,5
4,1,-6,1
-2,-3,7,1
4,-8,2,0
7,5,-2,0
5,-5,5,-1
0,0,-6,-8
-3,4,-3,-6
0,5,7,-1
2,-1,-7,-5
-3,1,-7,1
2,-1,4,0
0,7,4,5
8,0,3,-3
-1,3,1,-8
-4,-3,-5,-2
8,-5,6,6
8,5,2,3
-5,3,-7,-1
-8,-5,7,-6
6,0,-8,-1
-8,-3,8,-4
7,8,3,-4
-3,5,3,7
-8,5,0,5
-7,4,4,1
2,-4,4,-4
-2,5,-6,5
-4,1,-4,-1
8,0,-5,-2
4,6,-1,0
6,-5,-4,-4
8,4,0,0
0,-4,-4,4
-3,-7,-8,1
7,-7,2,-4
4,5,-3,0
-8,-7,-6,5
3,-3,5,-3
8,-4,-4,-1
-8,-5,6,-2
3,0,-3,6
-8,2,7,-7
8,7,6,4
-2,-2,8,-7
5,5,5,0
0,7,2,-1
6,-4,-6,-8
-1,-1,0,-8
-7,0,-1,-1
2,-2,-8,2
-1,-1,0,5
2,7,6,7
-5,0,0,5
6,0,0,3
4,-6,0,7
-6,-4,8,6
-2,-6,-4,-3
-7,-3,-6,-3
0,6,0,-8
1,5,-3,4
7,-8,-8,-8
-1,-4,-3,-6
6,4,4,0
-7,-5,-5,-3
5,3,-7,0
5,0,6,-1
0,8,2,0
-2,-7,-6,5
1,4,-7,-3
-5,3,1,-3
6,7,5,1
0,0,0,-7
1,-5,-4,-5
4,6,-3,3
0,-8,-6,6
0,4,-6,-3
-3,3,2,0
3,-8,6,-4
7,-3,-6,5
0,-1,8,-3
0,4,6,-8
0,-2,-4,5
6,0,-7,-6
-6,-2,8,-7
7,-6,4,0
2,1,-4,-2
1,-7,-3,-1
-3,0,5,4
-3,5,3,5
6,1,-8,-3
1,-4,4,4
1,-7,-2,6
4,1,-6,0
-1,6,4,-3
-1,7,-6,-4
-8,6,2,6
-1,0,-1,8
7,-5,1,-3
-8,2,-1,-5
2,0,4,7
5,6,0,0
5,8,6,-3
-5,-7,4,-6
-5,8,-5,8
-2,6,6,-3
-1,-1,5,-8
-6,3,4,0
2,-1,-2,-8
8,0,5,-8
-6,0,-4,0"""
